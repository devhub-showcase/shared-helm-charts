---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ .Chart.Name }}-pr
  labels:
    type: pipeline
    {{- include "build-pipeline.labels" . | nindent 4 }}
spec:
  params:
    - name: source-repo
      type: string
      description: source repo that contains the application code
    - name: source-branch
      type: string
      description: branch to build from in the source repo
    - name: namespace
      type: string
      description: where the tekton project is installed
      default: {{ .Values.pipelineBuild.namespace }}
    - name: app-name
      type: string
      description: name of the application
    - name: head-sha
      type: string
      description: head sha of the branch
    - name: registry
      type: string
      description: Image registry information
    - name: tenant-cicd-repo
      type: string
      description: source repo that contains CI/CD helm values
      default: {{.Values.tenantCICDRepo.url}}
    - name: tenant-cicd-repo-branch-name
      type: string
      description: source repo that contains CI/CD helm values
    - name: tenant-cicd-repo-base-branch
      type: string
      default: {{.Values.tenantCICDRepo.branch}}
      description: source repo that contains CI/CD helm values
    - name: values_file_name
      type: string
      default: dev-values.yaml
      description: Helm Development values file name

  workspaces:
    - name: source-shared-data
    - name: maven-settings
    - name: docker-config
    - name: git-config

  tasks:
    - name: git-clone-source    # fetch the app's repository
      taskRef:
        kind: ClusterTask
        name: git-clone
      params:
        - name: url
          value: $(params.source-repo)
        - name: revision
          value: $(params.source-branch)
      workspaces:
        - name: output
          workspace: source-shared-data
    - name: package             # run unit tests and compile the app's source code
      taskRef:
        kind: ClusterTask
        name: maven
      runAfter:
        - git-clone-source
      params:
        - name: GOALS  
          value:    
            - package   
      workspaces:
        - name: source
          workspace: source-shared-data
        - name: maven-settings
          workspace: maven-settings
    - name: build-and-push-image
      taskRef:
        kind: ClusterTask
        name: kaniko
      runAfter:
        - package
      params:
        - name: IMAGE
          value: $(params.registry)/$(params.app-name):1.0
      workspaces:
        - name: source
          workspace: source-shared-data
        - name: dockerconfig 
          workspace: docker-config

    - name: git-clone-tenant-cicd-repo      # fetch the tenant CI/CD repository
      taskRef:
        kind: ClusterTask
        name: git-clone
      runAfter:
        - build-and-push-image
      params:
        - name: url
          value: $(params.tenant-cicd-repo)
      workspaces:
        - name: output
          workspace: source-shared-data

    - name: create-new-branch     # create a new branch in the tenant gitops repository
      taskRef:
        kind: ClusterTask
        name: git-cli
      runAfter:
        - git-clone-tenant-cicd-repo
      params:
        - name: GIT_SCRIPT
          value: |
            git config --global --add safe.directory /workspace/source
            git remote set-url origin $(params.tenant-cicd-repo)
            git checkout -b $(params.tenant-cicd-repo-branch-name)
            git push --set-upstream origin $(params.tenant-cicd-repo-branch-name)
      workspaces:
        - name: source
          workspace: source-shared-data
        - name: basic-auth
          workspace: git-config
    
    - name: update-tag
      taskRef:
        kind: Task
        name: edit-file
      runAfter:
        - create-new-branch
      params:
        - name: app_name
          value: $(params.app-name)
        - name: values_file_name
          value: $(params.values_file_name)
        - name: image_tag 
          value: $(params.output-image-tag)
        - name: sha_hash
          value: $(tasks.build-and-push-image.results.IMAGE_DIGEST)
      workspaces:
        - name: output
          workspace: source-shared-data

    - name: push-latest-change
      taskRef:
        kind: ClusterTask
        name: git-cli
      runAfter:
        - update-tag
      params:
        - name: GIT_USER_EMAIL
          value: 
        - name: GIT_USER_NAME
          value: 
        - name: GIT_SCRIPT
          value: |
            git config --global --add safe.directory /workspace/source
            git add $(params.app-name)/$(params.values_file_name).yaml
            git commit -m "Update image tag in $(params.values_file_name)"
            git push
      workspaces:
        - name: source
          workspace: source-shared-data
        - name: basic-auth
          workspace: git-config
    
    - name: create-pull-request
      taskRef:
        kind: Task
        name: github-open-pr
      runAfter:
        - push-latest-change
      params:
        - name: GITHUB_TOKEN_SECRET_NAME
          value: pipeline-build-secret
        - name: REPO_FULL_NAME
          value: $(params.tenant-cicd-repo)
        - name: HEAD
          value: $(params.tenant-cicd-repo-branch-name)
        - name: BASE
          value: $(params.tenant-cicd-repo-base-branch)
        - name: TITLE
          value: "Update image tag and SHA hash for $(params.app-name)"
        - name: BODY
          value: "Updating the image tag and SHA hash after having built the latest $(params.app-env) changes of the $(params.app-name) application."
